Describe Git barckend
  Before all
    let path = TempDir()
    let git_dir = Join(path, '.git')
  End

  After all
    call RemoveAll(path)
  End

  Before each
    let hash = SHA1()
    call mkdir(git_dir, 'p')
    call mkdir(Join(git_dir, 'objects'))
    call mkdir(Join(git_dir, 'refs'))
    call writefile(['ref: refs/heads/master'], Join(git_dir, 'HEAD'))
    edit `=Join(path, 'a.txt')`
  End

  After each
    bwipe!
    call RemoveAll(git_dir)
  End

  It detects repository
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':    'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': '',
    \             })
  End

  It detects repository (submodule)
    call mkdir(Join(git_dir, 'modules', 'm'), 'p')
    call writefile(['ref: refs/heads/master'], Join(git_dir, 'modules', 'm', 'HEAD'))
    call mkdir(Join(path, 'm'))
    call writefile(['gitdir: ../.git/modules/m'], Join(path, 'm', '.git'))
    edit `=Join(path, 'm', 'a.txt')`
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   Join(path, 'm'),
    \               'dir':    Join(git_dir, 'modules', 'm'),
    \               'head':   'master',
    \               'action': '',
    \             })
  End

  It detects that it is in 'detached HEAD' state
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   hash[: 6],
    \               'action': '',
    \             })
  End

  It detects that it is checked out next branch
    let packed_refs = [
    \  '# pack-refs with: peeled fully-peeled ',
    \  hash . ' refs/heads/next',
    \]
    call writefile(packed_refs, Join(git_dir, 'packed-refs'))
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'next',
    \               'action': '',
    \             })

    call mkdir(Join(git_dir, 'refs', 'heads'))
    call writefile([hash], Join(git_dir, 'refs', 'heads', 'next'))
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'next',
    \               'action': '',
    \             })
  End

  It detects that it is checked out v1.0 tag
    let packed_refs = [
    \  '# pack-refs with: peeled fully-peeled ',
    \  hash . ' refs/tags/v1.0',
    \]
    call writefile(packed_refs, Join(git_dir, 'packed-refs'))
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'v1.0',
    \               'action': '',
    \             })

    let packed_refs = [
    \  '# pack-refs with: peeled fully-peeled ',
    \  SHA1() . ' refs/tags/v1.0',
    \  '^' . hash,
    \]
    call writefile(packed_refs, Join(git_dir, 'packed-refs'))
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'v1.0',
    \               'action': '',
    \             })

    call mkdir(Join(git_dir, 'refs', 'tags'))
    call writefile([hash], Join(git_dir, 'refs', 'tags', 'v1.0'))
    call writefile([hash], Join(git_dir, 'HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'v1.0',
    \               'action': '',
    \             })
  End

  It detects that it is doing 'rebase'
    call mkdir(Join(git_dir, 'rebase-apply'))
    call writefile([], Join(git_dir, 'rebase-apply', 'rebasing'))

    call writefile(['ref: refs/heads/master'], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'rebase',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'rebase',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['detached HEAD'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'detached HEAD',
    \               'action': 'rebase',
    \             })
  End

  It detects that it is doing 'am'
    call mkdir(Join(git_dir, 'rebase-apply'))
    call writefile([], Join(git_dir, 'rebase-apply', 'applying'))

    call writefile(['ref: refs/heads/master'], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'am',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'am',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['detached HEAD'], Join(git_dir, 'rebase-apply', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'detached HEAD',
    \               'action': 'am',
    \             })
  End

  It detects that it is doing 'merge'
    call writefile(['ref: refs/heads/master'], Join(git_dir, 'HEAD'))
    call writefile([hash], Join(git_dir, 'MERGE_HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'merge',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile([hash], Join(git_dir, 'MERGE_HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   hash[: 6],
    \               'action': 'merge',
    \             })
  End

  It detects that it is doing 'rebase -i'
    call mkdir(Join(git_dir, 'rebase-merge'))
    call writefile([], Join(git_dir, 'rebase-merge', 'interactive'))

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-merge', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'rebase-i',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['detached HEAD'], Join(git_dir, 'rebase-merge', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'detached HEAD',
    \               'action': 'rebase-i',
    \             })
  End

  It detects that it is doing 'rebase -m'
    call mkdir(Join(git_dir, 'rebase-merge'))

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['refs/heads/master'], Join(git_dir, 'rebase-merge', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'rebase-m',
    \             })

    call writefile([hash], Join(git_dir, 'HEAD'))
    call writefile(['detached HEAD'], Join(git_dir, 'rebase-merge', 'head-name'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'detached HEAD',
    \               'action': 'rebase-m',
    \             })
  End

  It detects that it is doing 'bisect'
    call writefile([], Join(git_dir, 'BISECT_LOG'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'bisect',
    \             })
  End

  It detects that it is doing 'cherry-pick'
    call writefile([], Join(git_dir, 'CHERRY_PICK_HEAD'))
    Assert Equals(vcs_info#get(),
    \             {
    \               'vcs':   'git',
    \               'root':   path,
    \               'dir':    git_dir,
    \               'head':   'master',
    \               'action': 'cherry',
    \             })
  End
End
